name: Python CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  POETRY_NO_INTERACTION: 1
  POETRY_VIRTUALENVS_IN_PROJECT: "true"

jobs:
  # Job 1: 静态代码分析，快速反馈
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up cache
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --with dev,docs --all-extras
      - name: Run Code Quality Checks
        run: |
          poetry run ruff check .
          poetry run ruff format --check .
          poetry run mypy .

  # Job 2: 运行单元测试和集成测试 (包含数据库服务)
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    # v3.0.0 新增：为 test job 启动一个 PostgreSQL 服务容器
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: main_db # 创建一个主数据库，测试将在其上创建临时数据库
        ports:
          - 5432:5432
        # 增加健康检查，确保 PostgreSQL 完全启动后再运行测试步骤
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # OpenAI 相关的 secrets
      TH_OPENAI_ENDPOINT: ${{ secrets.TH_OPENAI_ENDPOINT }}
      TH_OPENAI_API_KEY: ${{ secrets.TH_OPENAI_API_KEY }}
      TH_OPENAI_MODEL: ${{ secrets.TH_OPENAI_MODEL }}
      # v4.0 新增：为测试步骤设置 PostgreSQL 连接环境变量
      # 注意：主机名是服务名称 'postgres'，端口是映射的端口 '5432'
      TH_TEST_POSTGRES_DSN: "postgresql://user:password@localhost:5432/main_db"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Set up cache
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install --with dev,docs --all-extras

      - name: Run Tests with Coverage
        run: poetry run pytest --cov=trans_hub --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  # Job 3: 在实验性 Python 版本上运行测试 (可选)
  test-experimental:
    needs: lint
    runs-on: ubuntu-latest
    continue-on-error: true # 允许此 job 失败而不影响整个 CI 的结果
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up cache
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-3.13-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        # 在实验性版本上，即使安装失败也继续
        run: poetry install --with dev,docs --all-extras || true
      - name: Run Tests with Pytest (Python 3.13)
        run: poetry run pytest