# .github/workflows/ci.yml

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    # 步骤 1: 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 步骤 2: 设置 Python 环境
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        # 启用 Poetry 缓存，可以加速后续的依赖安装
        cache: 'poetry'

    # === [核心修正] 步骤 3: 安装 Poetry ===
    # 在使用 poetry 命令之前，必须先安装它。
    - name: Install Poetry
      run: |
        pip install poetry

    # 步骤 4: 安装项目依赖
    # 现在系统能找到 poetry 命令了
    - name: Install Poetry
      run: pipx install poetry

    - name: Install dependencies
      run: poetry install --with dev --all-extras

    # 步骤 5: 运行 Linter (Ruff)
    - name: Lint with Ruff
      run: poetry run ruff check .

    # 步骤 6: 检查代码格式 (Black & isort)
    - name: Check formatting with Black and isort
      run: |
        poetry run black --check .
        poetry run isort --check-only .

    # 步骤 7: 运行静态类型检查 (Mypy)
    - name: Type check with Mypy
      run: poetry run mypy .
      
    # 步骤 8: 运行测试
    # 使用 pytest 来运行，它会自动发现在 tests/ 目录下的测试文件
    - name: Run tests with Pytest
      run: |
        # 在 CI 环境中，我们通常不需要真实的 API Key
        # 我们的 run_coordinator_test.py 脚本会优雅地跳过需要 key 的测试
        poetry run python run_coordinator_test.py