# .github/workflows/ci.yml

name: Python CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  POETRY_NO_INTERACTION: 1
  POETRY_VIRTUALENVS_IN_PROJECT: "true"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python 3.12
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Set up cache for dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-v3
    - name: Install all dev dependencies
      run: poetry install --with dev

    - name: Run Code Quality Checks
      run: |
        poetry run ruff check .
        poetry run ruff format --check .
        poetry run mypy .

  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    # --- 核心修正：确保 secrets 的名称与 GitHub 中设置的完全一致 ---
    env:
      TH_OPENAI_ENDPOINT: ${{ secrets.TH_OPENAI_ENDPOINT }}
      TH_OPENAI_API_KEY: ${{ secrets.TH_OPENAI_API_KEY }}
      TH_OPENAI_MODEL: ${{ secrets.TH_OPENAI_MODEL }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Set up cache
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-v3
    - name: Install all dev dependencies
      run: poetry install --with dev
      
    - name: Run Tests with Coverage
      run: poetry run pytest --cov=trans_hub --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

  # 实验性测试 Job 保持不变
  test-experimental:
    needs: lint
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python 3.13
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install Poetry
      uses: snok/install-poetry@v1
    - name: Set up cache
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}-v3
    - name: Install all dev dependencies
      run: poetry install --with dev || true
    - name: Run Code Quality Checks (Python 3.13)
      run: |
        poetry run ruff check .
        poetry run ruff format --check .
        poetry run mypy .
    - name: Run Tests with Pytest (Python 3.13)
      run: poetry run pytest