# .github/workflows/ci.yml

name: Python CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# [优化] 使用 concurrency 来自动取消过时的 CI 运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # [优化] 设置 Poetry 的配置，使其更适合 CI 环境
  POETRY_NO_INTERACTION: 1
  POETRY_VIRTUALENVS_CREATE: false
  # 从 Secrets 注入环境变量
  TH_OPENAI_ENDPOINT: ${{ secrets.OPENAI_ENDPOINT }}
  TH_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # 任务一：快速代码质量检查
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - name: Install Poetry
      run: pipx install poetry
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      # [优化] 只安装 lint 组的依赖，更快
      run: poetry install --only lint
    - name: Run Code Quality Checks
      run: |
        poetry run ruff check .
        poetry run ruff format --check .
        poetry run mypy .

  # 任务二：在所有稳定版本上运行功能测试并报告覆盖率
  test:
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: pipx install poetry
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      # [优化] 安装测试组和所有可选引擎的依赖
      run: poetry install --with test --extras "translators openai"
    - name: Run Tests with Coverage
      # [优化] 生成覆盖率报告
      run: poetry run pytest --cov=trans_hub --cov-report=xml
    - name: Upload coverage to Codecov
      # [优化] 上传覆盖率报告到 Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # 需要在仓库 secrets 中设置 CODECOV_TOKEN
        files: ./coverage.xml
        fail_ci_if_error: true

  # 任务三：在最新的预览版上进行完整的实验性测试
  test-experimental:
    needs: lint
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install Poetry
      run: pipx install poetry
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      # 允许安装失败，因为某些依赖可能不支持预览版
      run: poetry install --with test --extras "translators openai" || true
      
    - name: Run Code Quality Checks (Python 3.13)
      run: |
        poetry run ruff check .
        poetry run ruff format --check .
        poetry run mypy .
      
    - name: Run Tests with Pytest (Python 3.13)
      run: poetry run pytest