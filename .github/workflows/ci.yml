# .github/workflows/ci.yml (优化版)

name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    # 步骤 1: 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 步骤 2: 安装 Poetry
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest 
    
    # 步骤 3: 设置 Python 环境并启用缓存
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'poetry'

    # 步骤 4: 安装项目依赖
    - name: Install dependencies
      run: poetry install --with dev
      
    # ==================================================================
    # 核心检查流程：Lint -> Format -> Types -> Tests
    # ==================================================================

    # 步骤 5: 运行代码质量检查 (Linter 和 Formatter)
    # 将 Ruff 的检查合并为一步，确保代码风格和格式都符合规范
    - name: Lint and check formatting with Ruff
      run: |
        poetry run ruff check .
        poetry run ruff format --check .

    # 步骤 6: 运行静态类型检查
    - name: Type check with Mypy
      run: poetry run mypy .
      
    # 步骤 7: 运行单元测试并生成覆盖率报告 (核心补充)
    # 这是最重要的补充：真正地运行你的测试套件！
    - name: Run tests with Pytest and generate coverage report
      run: poetry run pytest --cov=trans_hub --cov-report=xml
      # --cov=trans_hub: 指定要计算覆盖率的包名
      # --cov-report=xml: 生成 Codecov 等服务可以使用的 XML 格式报告

    # (可选) 步骤 8: 上传覆盖率报告
    # 如果你使用 Codecov 或类似服务，可以取消此步骤的注释
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }} # 需要在仓库的 Secrets 中配置
    #     files: ./coverage.xml
    #     fail_ci_if_error: true

    # 步骤 9: 运行端到端/集成测试脚本 (如果需要)
    # 这些脚本作为 Pytest 之外的补充测试
    - name: Run integration tests
      run: |
        poetry run python run_coordinator_test.py
        poetry run python demo_complex_workflow.py