# alembic/versions/3f8b9e6a0c2c_initial_schema.py
"""
create initial v3 schema

Revision ID: 3f8b9e6a0c2c
Revises:
Create Date: 2024-05-22 11:30:00.000000

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "3f8b9e6a0c2c"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto-generated by Alembic - START ###
    op.create_table(
        "th_content",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("business_id", sa.String(), nullable=False),
        sa.Column("source_payload_json", sa.JSON(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("business_id"),
    )
    op.create_index(
        op.f("ix_th_content_business_id"), "th_content", ["business_id"], unique=True
    )
    op.create_table(
        "th_contexts",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("context_hash", sa.String(), nullable=False),
        sa.Column("context_payload_json", sa.JSON(), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_th_contexts_context_hash"), "th_contexts", ["context_hash"], unique=True
    )
    op.create_table(
        "th_dead_letter_queue",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("translation_id", sa.String(), nullable=True),
        sa.Column("original_payload_json", sa.JSON(), nullable=False),
        sa.Column("context_payload_json", sa.JSON(), nullable=True),
        sa.Column("target_lang_code", sa.String(), nullable=False),
        sa.Column("last_error_message", sa.Text(), nullable=True),
        sa.Column(
            "failed_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("engine_name", sa.String(), nullable=True),
        sa.Column("engine_version", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "th_jobs",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("content_id", sa.String(), nullable=False),
        sa.Column("last_requested_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["content_id"],
            ["th_content.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("content_id"),
    )
    op.create_table(
        "th_translations",
        sa.Column("id", sa.String(), nullable=False),
        sa.Column("content_id", sa.String(), nullable=False),
        sa.Column("context_id", sa.String(), nullable=True),
        sa.Column("lang_code", sa.String(), nullable=False),
        sa.Column("source_lang", sa.String(), nullable=True),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("translation_payload_json", sa.JSON(), nullable=True),
        sa.Column("engine", sa.String(), nullable=True),
        sa.Column("engine_version", sa.String(), nullable=True),
        sa.Column("error", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "last_updated_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["content_id"],
            ["th_content.id"],
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["context_id"],
            ["th_contexts.id"],
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "content_id", "context_id", "lang_code", name="uq_translation"
        ),
    )
    op.create_index(
        "idx_translations_status_lang",
        "th_translations",
        ["status", "lang_code"],
        unique=False,
    )
    # --- [新增] 创建 th_audit_logs 表 ---
    op.create_table(
        "th_audit_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.String(), nullable=False),
        sa.Column("event_type", sa.String(), nullable=False),
        sa.Column("table_name", sa.String(), nullable=False),
        sa.Column("record_id", sa.String(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.Column(
            "timestamp",
            sa.DateTime(timezone=True),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("details_json", sa.JSON(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_audit_logs_record", "th_audit_logs", ["table_name", "record_id"], unique=False
    )
    # ### commands auto-generated by Alembic - END ###

    # --- [新增] 手动添加 PostgreSQL 特有的触发器和函数 ---
    bind = op.get_bind()
    if bind.dialect.name == "postgresql":
        op.execute("""
            CREATE OR REPLACE FUNCTION notify_new_translation_task()
            RETURNS TRIGGER AS $$
            BEGIN
                PERFORM pg_notify('new_translation_task', NEW.id::text);
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        """)
        op.execute("""
            CREATE TRIGGER on_new_translation_task
                AFTER INSERT OR UPDATE OF status ON th_translations
                FOR EACH ROW
                WHEN (NEW.status = 'PENDING')
                EXECUTE FUNCTION notify_new_translation_task();
        """)


def downgrade() -> None:
    # --- [新增] 手动添加 PostgreSQL 特有的清理逻辑 ---
    bind = op.get_bind()
    if bind.dialect.name == "postgresql":
        op.execute("DROP FUNCTION IF EXISTS notify_new_translation_task() CASCADE;")

    # ### commands auto-generated by Alembic - START ###
    op.drop_index("idx_audit_logs_record", table_name="th_audit_logs")
    op.drop_table("th_audit_logs")
    op.drop_index("idx_translations_status_lang", table_name="th_translations")
    op.drop_table("th_translations")
    op.drop_table("th_jobs")
    op.drop_table("th_dead_letter_queue")
    op.drop_index(op.f("ix_th_contexts_context_hash"), table_name="th_contexts")
    op.drop_table("th_contexts")
    op.drop_index(op.f("ix_th_content_business_id"), table_name="th_content")
    op.drop_table("th_content")
    # ### commands auto-generated by Alembic - END ###