# packages/core/src/trans_hub_core/uow.py
"""
定义了单元工作 (Unit of Work) 和仓库 (Repository) 的核心接口协议。
这是应用层与基础设施层之间的契约。
"""
from __future__ import annotations

from typing import TYPE_CHECKING, Any, Protocol, AsyncGenerator, AsyncContextManager
import uuid

if TYPE_CHECKING:
    from .types import Comment, ContentItem, Event, TranslationHead, TranslationRevision

# --- Repository Protocols ---

class IContentRepository(Protocol):
    """内容仓库接口。"""
    async def add(self, **data: Any) -> str: ...
    async def get_id_by_uida(
        self, project_id: str, namespace: str, keys_sha256_bytes: bytes
    ) -> str | None: ...
    async def update_payload(self, content_id: str, payload: dict[str, Any]) -> None: ...


class ITranslationRepository(Protocol):
    """翻译（修订与头指针）仓库接口。"""
    async def get_head_by_uida(
        self, project_id: str, namespace: str, keys: dict[str, Any],
        target_lang: str, variant_key: str
    ) -> TranslationHead | None: ...
    async def get_head_by_id(self, head_id: str) -> TranslationHead | None: ...
    async def get_head_by_revision(self, revision_id: str) -> TranslationHead | None: ...
    async def get_revision_by_id(self, revision_id: str) -> TranslationRevision | None: ...
    async def get_or_create_head(
        self, project_id: str, content_id: str, target_lang: str, variant_key: str
    ) -> tuple[str, int]: ...
    async def create_revision(self, **data: Any) -> str: ...
    async def get_published_translation(
        self, content_id: str, target_lang: str, variant_key: str
    ) -> tuple[str, dict[str, Any]] | None: ...
    def stream_drafts(self, batch_size: int) -> AsyncGenerator[list[ContentItem], None]: ...


class ITmRepository(Protocol):
    """翻译记忆库仓库接口。"""
    async def find_entry(
        self, *, project_id: str, namespace: str, reuse_sha: bytes, **kwargs: Any
    ) -> tuple[str, dict[str, Any]] | None: ...
    async def upsert_entry(self, **data: Any) -> str: ...
    async def link_revision_to_tm(self, rev_id: str, tm_id: str, project_id: str) -> None: ...
    async def check_link_exists(self, rev_id: str) -> bool: ...


class IMiscRepository(Protocol):
    """其他杂项实体的仓库接口 (事件, 评论, 回退)。"""
    async def add_project_if_not_exists(self, project_id: str, display_name: str) -> None: ...
    async def write_event(self, event: Event) -> None: ...
    async def add_comment(self, comment: Comment) -> str: ...
    async def get_comments(self, head_id: str) -> list[Comment]: ...
    async def get_fallback_order(self, project_id: str, locale: str) -> list[str] | None: ...
    async def set_fallback_order(
        self, project_id: str, locale: str, fallback_order: list[str]
    ) -> None: ...


class IOutboxRepository(Protocol):
    """发件箱仓库接口。"""
    async def add(self, topic: str, payload: dict[str, Any]) -> None: ...
    async def pull_pending(self, batch_size: int) -> list[Any]: ...
    async def mark_as_published(self, event_ids: list[uuid.UUID]) -> None: ...


# --- Unit of Work Protocol ---

class IUnitOfWork(Protocol):
    """单元工作接口协议。"""
    content: IContentRepository
    translations: ITranslationRepository
    tm: ITmRepository
    misc: IMiscRepository
    outbox: IOutboxRepository

    def __await__(self) -> "IUnitOfWork": ...
    async def __aenter__(self) -> "IUnitOfWork": ...
    async def __aexit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...