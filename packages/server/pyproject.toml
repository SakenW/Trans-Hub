[build-system]
requires = ["poetry-core>=1.9.1"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "trans-hub-server"
version = "0.1.0"
description = "Trans-Hub 服务端实现，包含应用、基础设施和表现层。"
authors = ["Saken <saken.w@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "trans_hub", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.10"

# --- 核心框架 ---
pydantic = "^2.11.6"         # 数据校验与模型
pydantic-settings = "^2.6.1" # 从环境加载配置
structlog = "^24.4.0"        # 结构化日志

# --- 本地 Monorepo 包 ---
trans-hub-core = { path = "../core", develop = true }
trans-hub-uida = { path = "../uida", develop = true }

# --- 数据库与迁移 ---
sqlalchemy = { version = "^2.0.36", extras = ["asyncio"] }
alembic = "^1.14.0"
greenlet = "^3.1.0"                                        # SQLAlchemy 异步模式依赖
dependency-injector = "^4.41.0"                            # [新增] DI 容器

# --- CLI 框架 (必装) ---
typer = { version = ">=0.15.1", extras = ["all"] }

# --- 可选运行时驱动 ---
asyncpg = { version = ">=0.30.0", optional = true } # PostgreSQL 异步驱动
aiosqlite = { version = ">=0.20.0", optional = true } # SQLite 异步驱动
redis = { version = ">=5.1.1", extras = [
    "hiredis",
], optional = true } # Redis 客户端 (hiredis 加速)

[tool.poetry.extras]
postgres = ["asyncpg"]
sqlite = ["aiosqlite"]
redis = ["redis"]

# --- 开发与测试依赖 ---
[tool.poetry.group.dev.dependencies]
# 测试框架
pytest = ">=8.4.1"
pytest-asyncio = ">=1.1.0"
nest-asyncio = ">=1.6.0"   # [新增] 允许在已有事件循环中嵌套运行 asyncio.run()
pytest-cov = ">=6.2.1"
pytest-rerunfailures = ">=14.0"  # [新增] 测试失败重试机制

# 代码质量与静态分析
ruff = ">=0.12.9"       # Linter & Formatter
mypy = ">=1.17.1"       # 静态类型检查
import-linter = ">=2.4" # [新增] 架构分层守护

# 开发体验与工具
rich = ">=14.1.0"       # 漂亮的 CLI/日志输出
questionary = ">=2.1.0" # 交互式 CLI

# 测试所需的数据库驱动
# (测试需要同步驱动用于建/删库，也需要异步驱动用于运行测试)
# [修复] Alembic 默认依赖的同步驱动
psycopg = { version = ">=3.2.3", extras = ["binary"] } # PostgreSQL 同步驱动
asyncpg = ">=0.30.0"                                   # 确保 asyncpg 在开发环境中始终可用

[tool.poetry.scripts]
# CLI 入口点
trans-hub = "trans_hub.adapters.cli.main:app"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = "-ra -q --strict-markers --reruns=2 --reruns-delay=1"
markers = [
    "unit: Mark a test as a unit test (fast, no I/O).",
    "integration: Mark a test as an integration test (can use local DB/cache).",
    "e2e: Mark a test as an end-to-end test (from external boundary).",
    "db: Mark a test as database-dependent.",
    "slow: Mark a test as slow to run.",
    "migrations: Mark a test related to Alembic migrations.",
    "invariants: Mark a test that checks architectural invariants.",
    "engine: Mark a test related to translation engines.",
    "tm: Mark a test related to translation memory logic.",
]
